name: Test

on:
  push:
  # schedule:
  #   - cron: "0 3 * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 20

    strategy:
      matrix:
        stage: [karma, cypress-lite, cypress-full, prod]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: "14.x"
      - name: Install
        run: |
          python -m pip install --upgrade pip
          # version is "x.y.0": convert in x.y
          export CURRENT_VERSION=$(grep '"version"' src/package.json | awk {'print $2'} | tr -d '", ' | awk -F. {'print $1 "." $2'})
          pip install --upgrade --no-cache-dir git+https://github.com/rapydo/do.git@${CURRENT_VERSION}
          auth_services=(postgres mysql neo4j neo4j mongo)
          AUTH=${auth_services[$(($RANDOM % ${#auth_services[@]}))]}
          echo "Selected random authentication service = ${AUTH}"
          # Make the environment variable available to next steps
          echo "AUTH=${AUTH}" >> $GITHUB_ENV
          mkdir rapydo_tests
          cd rapydo_tests
          rapydo --testing create prj --auth ${AUTH} --frontend angular --origin-url https://your_remote_git/your_project.git

      - name: Run Karma
        if: ${{ matrix.stage == 'karma' }}
        run: |
          cd rapydo_tests
          rapydo --testing init
          rapydo -s frontend pull
          rapydo -s frontend start
          sleep 5
          rapydo shell --no-tty frontend "yarn install"
          rapydo shell --no-tty frontend "reload-types"
          rapydo shell --no-tty frontend "yarn run test:single"
          cp data/prj/karma/lcov.info .
          bash <(curl -s https://codecov.io/bash) -R submodules/rapydo-angular;

      - uses: rapydo/actions/setup-cypress@v1
        if: ${{ matrix.stage == 'cypress-lite' || matrix.stage == 'cypress-full'}}
        with:
          id: ${{ secrets.CYPRESS_PROJECT_ID }}
          key: ${{ secrets.CYPRESS_RECORD_KEY }}

      - name: Run Cypress
        if: ${{ matrix.stage == 'cypress-lite' || matrix.stage == 'cypress-full'}}
        run: |
          cd rapydo_tests

          rapydo --testing init
          rapydo add --force component sink

          rapydo pull

          if [[ "${{ matrix.stage }}" == "cypress-full" ]]; then

            # AUTH_MAX_PASSWORD_VALIDITY: 0
            # AUTH_DISABLE_UNUSED_CREDENTIALS_AFTER: 0
            # AUTH_SECOND_FACTOR_AUTHENTICATION: None
            # Please note some env as 'true' and others as 'True'
            # The first are variable only used on the frontend and assigned with a javascript true
            # The second are variable also used by the backend and assigned with a python True
            rapydo -e PROJECT_TITLE="Your ${AUTH} Full Project" -e ALLOW_TERMS_OF_USE=true -e AUTH_FORCE_FIRST_PASSWORD_CHANGE=True -e AUTH_MIN_PASSWORD_LENGTH=12 start
          else
            rapydo -e PROJECT_TITLE="Your ${AUTH} Project" start
          fi

          rapydo shell --no-tty backend 'restapi wait'
          # To be removed?
          sleep 20
          rapydo logs
          rapydo shell --no-tty backend --detach "restapi launch"
          rapydo shell --no-tty frontend "yarn install"
          rapydo shell --no-tty frontend "reload-types"
          rapydo logs
          if [[ "${{ matrix.stage }}" == "cypress-full" ]]; then
            rapydo shell --no-tty frontend "yarn run cypress:start"
          else
            # Only differs in --group option
            rapydo shell --no-tty frontend "yarn run cypress:start:lite"
          fi


          rapydo shell --no-tty frontend "npx nyc --all report --reporter=lcov --report-dir /coverage"
          cp data/prj/karma/lcov.info .
          bash <(curl -s https://codecov.io/bash) -R submodules/rapydo-angular

      # - name: Save Video Artifact
      #   uses: actions/upload-artifact@v1
      #   if: ${{ matrix.stage == 'cypress-lite' || matrix.stage == 'cypress-full'}}
      #   with:
      #     name: cypress-recordings
      #     path: rapydo_tests/data/prj/cypress

      # - name: Print backend logs on failure
      #   if: ${{ failure() && (matrix.stage == 'cypress-lite' || matrix.stage == 'cypress-full') }}
      #   run: cat rapydo_tests/data/logs/backend-server.log

      - name: Run Prod Tests
        if: ${{ matrix.stage == 'prod' }}
        run: |
          cd rapydo_tests
          rapydo --prod init

          rapydo add --force component sink

          rapydo pull
          rapydo -s frontend,proxy start
          rapydo dump
          rapydo -s frontend logs --follow
          docker-compose logs --tail 2 frontend 2>&1 | grep "files have been compressed."
          docker-compose logs --tail 20 proxy
          curl --insecure -X GET https://localhost
          npm install -g seespee cypress
          seespee --level 1 --validate https://localhost

          opt="--silent --head --insecure -X GET https://localhost"

          # A lot of urls serve the index.html, so that the expected response is:
          # 200 OK, content-type html, no-cache and CSP enabled

          echo -e "\n**** Testing index.html HTTP response ****"
          curl $opt | grep -E "^HTTP/.+ 200"
          curl $opt/ | grep -E "^HTTP/.+ 200"
          curl $opt/index.html | grep -E "^HTTP/.+ 200"
          curl $opt/app | grep -E "^HTTP/.+ 200"
          curl $opt/app/ | grep -E "^HTTP/.+ 200"
          curl $opt/app/index.html | grep -E "^HTTP/.+ 200"
          curl $opt/app/anything | grep -E "^HTTP/.+ 200"
          curl $opt/public | grep -E "^HTTP/.+ 200"
          curl $opt/public/ | grep -E "^HTTP/.+ 200"
          curl $opt/public/index.html | grep -E "^HTTP/.+ 200"
          curl $opt/public/anything | grep -E "^HTTP/.+ 200"

          echo -e "\n**** Testing index.html cache-control ****"
          curl $opt | grep "cache-control: no-store"
          curl $opt/ | grep "cache-control: no-store"
          curl $opt/index.html | grep "cache-control: no-store"
          curl $opt/app | grep "cache-control: no-store"
          curl $opt/app/ | grep "cache-control: no-store"
          curl $opt/app/index.html | grep "cache-control: no-store"
          curl $opt/app/anything | grep "cache-control: no-store"
          curl $opt/public | grep "cache-control: no-store"
          curl $opt/public/ | grep "cache-control: no-store"
          curl $opt/public/index.html | grep "cache-control: no-store"
          curl $opt/public/anything | grep "cache-control: no-store"

          echo -e "\n**** Testing index.html CSP header ****"
          curl $opt | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/ | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/index.html | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/app | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/app/ | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/app/index.html | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/app/anything | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/public | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/public/ | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/public/index.html | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/public/anything | grep -i "Content-Security-Policy: frame-ancestors"

          echo -e "\n**** Testing index.html Content-Type ****"
          curl $opt | grep -i "Content-Type: text/html"
          curl $opt/ | grep -i "Content-Type: text/html"
          curl $opt/index.html | grep -i "Content-Type: text/html"
          curl $opt/app | grep -i "Content-Type: text/html"
          curl $opt/app/ | grep -i "Content-Type: text/html"
          curl $opt/app/index.html | grep -i "Content-Type: text/html"
          curl $opt/app/anything | grep -i "Content-Type: text/html"
          curl $opt/public | grep -i "Content-Type: text/html"
          curl $opt/public/ | grep -i "Content-Type: text/html"
          curl $opt/public/index.html | grep -i "Content-Type: text/html"
          curl $opt/public/anything | grep -i "Content-Type: text/html"

          echo -e "\n**** Testing index.html gzip encoding ****"
          curl $opt --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/ --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/index.html --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/app --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/app/ --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/app/index.html --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/app/anything --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/public --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/public/ --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/public/index.html --header 'accept-encoding: gzip' | grep "content-encoding: gzip"
          curl $opt/public/anything --header 'accept-encoding: gzip' | grep "content-encoding: gzip"

          # unrecognized patterns have to respond with a 404
          echo -e "\n**** Testing invalid path ****"
          curl $opt/anything | grep -E "^HTTP/.+ 404"

          # favicon is expected to be found with content-type image/x-icon and CSP Enabled
          # cache is expected to be set a 1 month (2592000)
          echo -e "\n**** Testing favicon.ico ****"
          curl $opt/app/custom/assets/favicon/favicon.ico | grep -E "^HTTP/.+ 200"
          curl $opt/app/custom/assets/favicon/favicon.ico | grep "cache-control: max-age=2592000"
          curl $opt/app/custom/assets/favicon/favicon.ico | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/app/custom/assets/favicon/favicon.ico | grep -i "Content-Type: image/x-icon"

          # asset names are dinamically generated at build type... extract it from the index.html..
          asset=`curl --silent --insecure -X GET https://localhost | grep -o "styles\..*.css"`

          echo -e "\n**** Testing ${asset} ****"
          # assets are expected to be found with proper content-type and CSP Enabled
          # cache is expected to be set a 1 year (31557600)
          curl $opt/$asset | grep -E "^HTTP/.+ 200"
          curl $opt/$asset | grep "cache-control: max-age=31557600"
          curl $opt/$asset | grep -i "Content-Security-Policy: frame-ancestors"
          curl $opt/$asset | grep -i "Content-Type: text/css"
          curl $opt/$asset --header 'accept-encoding: gzip' | grep "content-encoding: gzip"

          echo -e "\n"

          echo "{}" > cypress.json
          cypress run --browser chrome --config integrationFolder=. --spec submodules/rapydo-angular/cypress/prod-test.js
